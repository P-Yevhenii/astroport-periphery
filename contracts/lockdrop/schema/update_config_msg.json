{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UpdateConfigMsg",
  "type": "object",
  "properties": {
    "astro_token_address": {
      "description": "Astroport token address",
      "type": [
        "string",
        "null"
      ]
    },
    "auction_contract_address": {
      "description": "Bootstrap Auction contract address",
      "type": [
        "string",
        "null"
      ]
    },
    "generator_address": {
      "description": "Generator (Staking for dual rewards) contract address",
      "type": [
        "string",
        "null"
      ]
    },
    "lockdrop_incentives": {
      "description": "Total ASTRO lockdrop incentives to be distributed among the users",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner": {
      "description": "Account which can update config",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
