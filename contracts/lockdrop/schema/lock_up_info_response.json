{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "LockUpInfoResponse",
  "type": "object",
  "required": [
    "astro_transferred",
    "generator_astro_debt",
    "generator_proxy_debt",
    "lp_units_locked",
    "unlock_timestamp",
    "withdrawal_flag"
  ],
  "properties": {
    "astro_rewards": {
      "description": "ASTRO tokens received as rewards for participation in the lockdrop",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "astro_transferred": {
      "description": "ASTRO tokens transferred to user",
      "type": "boolean"
    },
    "astroport_lp_units": {
      "description": "User's Astroport LP units, calculated as lp_units_locked (terraswap) / total LP units locked (terraswap) * Astroport LP units minted post migration",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "generator_astro_debt": {
      "description": "Generator ASTRO tokens loockup received as generator rewards",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "generator_proxy_debt": {
      "description": "Generator Proxy tokens lockup received as generator rewards",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "lp_units_locked": {
      "description": "Terraswap LP units locked by the user",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "unlock_timestamp": {
      "description": "Timestamp beyond which this position can be unlocked",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "withdrawal_flag": {
      "description": "Boolean value indicating if the user's has withdrawn funds post the only 1 withdrawal limit cutoff",
      "type": "boolean"
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
